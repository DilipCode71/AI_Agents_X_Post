
import express from "express";
import dotenv from "dotenv";
import cron from "node-cron";
import { fetchLatestTechNews } from "./services/fetchNews.js";
import { generateTweetFromNews } from "./services/generateTweet.js";
import { postToTwitter } from "./services/postToTwitter.js";

dotenv.config();
const app = express(); 
let lastTweetTime = 0;
const MIN_INTERVAL = 30 * 60 * 1000; // 30 minutes gap

app.get("/tweet", async (req, res) => {
  const now = Date.now();

  // Agar last tweet ke baad minimum interval nahi hua to skip kar do
  if (now - lastTweetTime < MIN_INTERVAL) {
    console.log("⏳ Skipping tweet: interval not reached");
    return res.status(200).send("Skipped to avoid too many requests");
  }

  lastTweetTime = now;

  try {
    const news = await fetchLatestTechNews();
    const tweet = await generateTweetFromNews(news);

    if (tweet && news) {
      await postToTwitter(tweet, news.image);
      console.log("✅ Tweet posted successfully!");
      return res.status(200).send("Tweet posted successfully!");
    } else {
      console.log("⚠️ No tweet generated");
      return res.status(200).send("No tweet generated");
    }
  } catch (error) {
    console.error("❌ Tweet Error:", error.message);
    return res.status(500).send("Error generating or posting tweet");
  }
});



if (process.env.RUN_LOCAL_CRON === "true") {
  console.log("Cron job active locally: Will run at 8:00 AM daily");

  cron.schedule("0 8 * * *", async () => {
    console.log(" Running local scheduled tweet job...");

    try {
      const news = await fetchLatestTechNews();

      const tweet = await generateTweetFromNews(news);

      
      
      // if (tweet) {
      //   await postToTwitter(tweet);
      //   console.log("Tweet posted via local cron");
      // } 

      if (tweet && news) {
  await postToTwitter(tweet, news.image);   
}else {
        console.log(" No tweet generated by local cron");
      }
    } catch (error) {
      console.error(" Local Cron Error:", error.message);
    }
  });
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
